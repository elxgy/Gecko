name: Commit Message Validation

on:
  pull_request:
    types: [opened, edited, synchronize, reopened]
  push:
    branches: [main, develop]

jobs:
  commitlint:
    name: Validate Commit Messages
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install commitlint
        run: |
          npm install -g @commitlint/cli @commitlint/config-conventional

      - name: Create commitlint config
        run: |
          cat > .commitlintrc.json << 'EOF'
          {
            "extends": ["@commitlint/config-conventional"],
            "rules": {
              "type-enum": [
                2,
                "always",
                [
                  "feat",
                  "fix",
                  "docs",
                  "style",
                  "refactor",
                  "perf",
                  "test",
                  "build",
                  "ci",
                  "chore",
                  "revert"
                ]
              ],
              "type-case": [2, "always", "lower-case"],
              "type-empty": [2, "never"],
              "scope-case": [2, "always", "lower-case"],
              "subject-case": [2, "never", ["sentence-case", "start-case", "pascal-case", "upper-case"]],
              "subject-empty": [2, "never"],
              "subject-full-stop": [2, "never", "."],
              "header-max-length": [2, "always", 72],
              "body-leading-blank": [1, "always"],
              "body-max-line-length": [2, "always", 100],
              "footer-leading-blank": [1, "always"],
              "footer-max-line-length": [2, "always", 100]
            }
          }
          EOF

      - name: Validate current commit (push)
        if: github.event_name == 'push'
        run: |
          echo "${{ github.event.head_commit.message }}" | commitlint

      - name: Validate PR commits
        if: github.event_name == 'pull_request'
        run: |
          # Get all commits in the PR
          git log --format="%H %s" ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} > commits.txt
          
          # Validate each commit message
          while IFS=' ' read -r hash subject; do
            echo "Validating commit: $hash"
            echo "$subject" | commitlint
          done < commits.txt

      - name: Comment on PR with commit message guidelines
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const message = `## ❌ Commit Message Validation Failed
            
            Your commit messages don't follow the conventional commit format. Please update them to match this pattern:
            
            \`\`\`
            <type>[optional scope]: <description>
            
            [optional body]
            
            [optional footer(s)]
            \`\`\`
            
            ### Valid Types:
            - **feat**: A new feature
            - **fix**: A bug fix
            - **docs**: Documentation only changes
            - **style**: Changes that do not affect the meaning of the code
            - **refactor**: A code change that neither fixes a bug nor adds a feature
            - **perf**: A code change that improves performance
            - **test**: Adding missing tests or correcting existing tests
            - **build**: Changes that affect the build system or external dependencies
            - **ci**: Changes to our CI configuration files and scripts
            - **chore**: Other changes that don't modify src or test files
            - **revert**: Reverts a previous commit
            
            ### Examples:
            \`\`\`
            feat(editor): add syntax highlighting for Go files
            fix(ui): resolve cursor positioning bug in multi-line text
            docs: update installation instructions in README
            style: format code according to gofmt standards
            refactor(textbuffer): simplify text manipulation logic
            perf(syntax): optimize highlighting performance for large files
            test(handlers): add unit tests for keyboard event handling
            build: update Go version to 1.24.3
            ci: add cross-platform build testing
            chore: update dependencies to latest versions
            \`\`\`
            
            ### Rules:
            - Header must be ≤ 72 characters
            - Type must be lowercase
            - Subject must not end with a period
            - Body lines must be ≤ 100 characters
            - Use imperative mood ("add" not "added" or "adds")
            
            Please update your commit messages and force-push to this branch.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });

  # Job to check PR title follows conventional commits
  pr-title-check:
    name: Validate PR Title
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install commitlint
        run: npm install -g @commitlint/cli @commitlint/config-conventional

      - name: Create commitlint config
        run: |
          cat > .commitlintrc.json << 'EOF'
          {
            "extends": ["@commitlint/config-conventional"],
            "rules": {
              "type-enum": [
                2,
                "always",
                [
                  "feat",
                  "fix",
                  "docs",
                  "style",
                  "refactor",
                  "perf",
                  "test",
                  "build",
                  "ci",
                  "chore",
                  "revert"
                ]
              ],
              "header-max-length": [2, "always", 72]
            }
          }
          EOF

      - name: Validate PR title
        run: |
          echo "${{ github.event.pull_request.title }}" | commitlint

      - name: Comment on invalid PR title
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const message = `## ❌ PR Title Validation Failed
            
            Your PR title doesn't follow the conventional commit format.
            
            **Current title:** \`${{ github.event.pull_request.title }}\`
            
            Please update your PR title to match this pattern:
            \`<type>[optional scope]: <description>\`
            
            **Examples:**
            - \`feat(editor): add syntax highlighting for Go files\`
            - \`fix(ui): resolve cursor positioning bug\`
            - \`docs: update installation instructions\`
            
            The title should be ≤ 72 characters and use imperative mood.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });